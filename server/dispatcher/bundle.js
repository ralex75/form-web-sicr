!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("../api/db"),require("../api/mailer"),require("../api/templates"),require("../api/templates.js"),require("../api/user"));else if("function"==typeof define&&define.amd)define(["../api/db","../api/mailer","../api/templates","../api/templates.js","./../api/user"],t);else{var r="object"==typeof exports?t(require("../api/db"),require("../api/mailer"),require("../api/templates"),require("../api/templates.js"),require("../api/user")):t(e["../api/db"],e["../api/mailer"],e["../api/templates"],e["../api/templates.js"],e["./../api/user"]);for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(global,(function(e,t,r,n,o){return(()=>{"use strict";var i={584:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)n[o]=i[a];return n},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ReadRequests=void 0;var s=a(r(245)),u=r(74),c=r(640),l=r(537),p=r(25),f=r(570).getUser;t.ReadRequests=function(){p.helpers.READ_ALL_REQUESTS().then((function(e){e.forEach((function(e){h(e)}))}))};var h=function(e){return n(this,void 0,void 0,(function(){var t,r,a,h,d,y,m,_,v,b,w,g,R,E,O,A,P,S,x,D,N,T=this;return o(this,(function(I){switch(I.label){case 0:console.log("handling request id: ",e.id),t=e.id,r=e.uid,a=e.rtype,h=e.data,d=null,y=[],m={notific:null,process:null},_=null,v="",b="supporto@roma1.infn.it",w=null,I.label=1;case 1:if(I.trys.push([1,10,11,12]),!r||!a||!h)throw new Error("Invalid request data, missing some arguments");return[4,f(r)];case 2:if(w=I.sent(),!(_=i([w.email],w.mailAlternates))[0])throw new Error("User email address not found.");if(!(v=(v=_.filter((function(e){return e.match(/^(\w+(\.\w+)+@roma1.infn.it)$/)}))[0]||"")||w.email))throw new Error("User mail address is empty");if(!w.isAuthorized)throw new Error("User is not authorized!:"+JSON.stringify(w));g=null,I.label=3;case 3:return I.trys.push([3,6,,7]),(g=l.ProcessRequest.initialize(a,w,h))?[4,g.exec()]:[3,5];case 4:if(d=I.sent(),console.log("Processed Request ID: "+t+" - "+a),(null==d?void 0:d.processResult)&&d.processResult.getStatus()==l.ProcessResultStatus.BAD)throw console.log("Eccezione processamento"),new Error(d.processResult.getValue());I.label=5;case 5:return[3,7];case 6:return R=I.sent(),y.push({type:"process",value:R.message||JSON.stringify(R),data:h}),[3,7];case 7:return d||(d=c.ReportFactory.initialize(a,w,h)),[4,d.renderAs(u.RenderType.BASIC)];case 8:return E=I.sent(),[4,d.renderAs(u.RenderType.ADVANCED)];case 9:return O=I.sent(),A="Richiesta ID "+t+" - "+a,""!=(P=d.getSubject())&&(A=A+=" - "+P),console.log("sending basic report to user address: ",v),p.helpers.sendReport(b,v,A,E),console.log("sending adv report to supporto: ",b),p.helpers.sendReport(v,b,A+" -- Riservata Supporto --",O),m.notific=s.default(),[3,12];case 10:return S=I.sent(),console.log(S),x=v||"dispatcher",D={uid:w.uid,uuid:w.uuid,name:w.name,surname:w.surname},y.push({type:"request",id:e.id,from:x,data:h,value:S.message||JSON.stringify(S),user:D}),[3,12];case 11:return m.process=s.default(),N=y.length>0?JSON.stringify(y):null,y.forEach((function(t){return n(T,void 0,void 0,(function(){var r,n;return o(this,(function(o){switch(o.label){case 0:r=JSON.stringify(t),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,p.helpers.sendReport(b,b,"Errore elaborazione richiesta  ID - "+e.id+" - Type - "+e.rtype,r)];case 2:return o.sent(),[3,4];case 3:return n=o.sent(),console.log(n),[3,4];case 4:return[2]}}))}))})),p.helpers.setDispatchResult(t,m.notific,m.process,N),console.log((N?"error":"done")+" request id: "+e.id),[7];case 12:return[2]}}))}))}},25:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.helpers=void 0;var n=r(982).nqdb,o=r(237).sendMail,i={getPortLocation:function(e){return new Promise((function(t){n.any('select loc_id ,loc_building as "build",loc_floor as "floor",            loc_name as "room", pp_port_code as "port_code", pp_port_alias as "port_alias" from vw_network_status_ex_3 where pp_port_code=$1 or pp_port_alias=$1 limit 1',[e]).then((function(e){t(e[0]||null)}))}))},getHost:function(e){return new Promise((function(t){var r=e.toLowerCase();n.any('select loc_id ,loc_building as "build",loc_floor as "floor",loc_name, host_name,host_domain,host_mac,pp_port_code from vw_network_status_ex_3 where lower(host_mac::text)=lower($1)',[r]).then((function(e){t(e[0]||null)}))}))},getUserDHCPHosts:function(e){return new Promise((function(t){n.any("select host_mac from vw_network_status_ex_3 where lower(admin_cf::text)=lower($1) and host_is_dhcp is true",[e]).then((function(e){t(e)}))}))},dnsLookup:function(e){var t=r(523);return new Promise((function(r,n){t.resolve(e,(function(e,t){e&&(console.log(e),"ENOTFOUND"!=(e.errno||e.code)&&n(e)),r(t||null)}))}))},getPortNetwork:function(e){return new Promise((function(t){var r=e.split("-")[1];n.any("select network from network_closet nc, vlan_network vn                     where nc.nc_code=$1 and nc.vlan=vn.vlan",[r]).then((function(e){t(e[0]||null)}))}))},addEmptySpacesToEnd:function(e,t){var r=e-t.length;return t+" ".repeat(r=r<0?0:r)},READ_ALL_REQUESTS:function(){return n.query("select * from user_requests where status ='SUBMITTED'")},setDispatchResult:function(e,t,r,o){var i=o?"BAD":"PROCESSED";n.query("update user_requests set notific_date=$1,process_date=$2,exc=$3,status=$5 where id=$4",[t,r,o,e,i]).then((function(e){})).catch((function(e){throw console.log("An error has occurred:"),e}))},sendReport:function(e,t,r,n){return o(e,t,r,"<pre>"+n+"</pre>")}};t.helpers=i},537:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProcessResultStatus=t.ProcessRequest=void 0;var u,c=s(r(245)),l=r(167),p=r(502),f=r(851),h=r(654);!function(e){e[e.OK=0]="OK",e[e.BAD=1]="BAD"}(u||(u={})),t.ProcessResultStatus=u;var d=function(){function e(e,t){this._status=e,this._value=t}return e.prototype.getStatus=function(){return this._status},e.prototype.getValue=function(){return this._value},e.prototype.render=function(){return JSON.stringify(this._value)},e}(),y=function(e){function t(t){return e.call(this,u.OK,t)||this}return o(t,e),t}(d),m=function(e){function t(t){return e.call(this,u.BAD,t)||this}return o(t,e),t}(d),_=function(){function e(e,t){if(this.user=e,this.data=t,!this.isValidData(t))throw new Error("Missing required request data fields:"+JSON.stringify(t)||0)}return e.initialize=function(e,t,r){switch(e){case"IP":return new b(t,r);case"WIFI":return new v(t,r);case"ACCOUNT":return new w(t,r);default:return null}},e}();t.ProcessRequest=_;var v=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.isValidData=function(e){var t=e.from,r=void 0===t?null:t,n=e.to;return!!r&&!(void 0===n||!n)},t.prototype.exec=function(){return i(this,void 0,void 0,(function(){var e,t,r,n,o,i,s;return a(this,(function(a){switch(a.label){case 0:e=this.user,t=Object.assign({},this.data),r=null,a.label=1;case 1:return a.trys.push([1,4,,5]),n={name:e.name,surname:e.surname,email:e.email,phone:e.phone,start:c.default(t.from).format("YYYY-MM-DD"),end:c.default(t.to).format("YYYY-MM-DD")},o="http://webapp2.roma1.infn.it:4000",[4,l.post(o+"/api/users/create",{user:n,evid:null})];case 2:return i=a.sent(),[4,l.post(o+"/api/mail/user",{uid:i.data.id})];case 3:return a.sent(),r=new y(i.data),[3,5];case 4:return s=a.sent(),r=new m(s),[3,5];case 5:return[2,new p.WiFiReport(this.user,this.data,r)]}}))}))},t}(_),b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.isValidData=function(e){return!0},t.prototype.exec=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(r){return e=this.user,t=this.data,[2,new f.IPReport(e,t)]}))}))},t}(_),w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.isValidData=function(e){return!0},t.prototype.exec=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(r){return e=this.user,t=this.data,[2,new h.AccountReport(e,t)]}))}))},t}(_)},654:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)n[o]=i[a];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.AccountReport=void 0;var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.getTemplateFileName=function(){return"account.txt"},t.prototype.mapBasicData=function(e,t){return i(this,void 0,Promise,(function(){var r,n,o;return a(this,(function(i){return r={mail:"contenuto della casella di posta elettronica",afs:"files AFS","mail-afs":"contenuto della casella di posta elettronica e files AFS"},n={mail:"e-mailbox content",afs:"AFS files","mail-afs":"e-mailbox content and AFS files"},o=(o=s([e.email],e.mailAlternates))[0]?o.join("; "):"",[2,{UID:e.uid||"---",NAME:e.name,SURNAME:e.surname,EMAIL:t.email,EMAIL_ALT:o,PHONE:e.phone||"---",EXPIRATION:e.expiration,INFNUUID:e.uuid,ROLE:e.role,RESTORE_ITA:r[t.restore]||"nessuno",RESTORE_ENG:n[t.restore]||"none",RESTORE_MAIL_PROCEDURE:""}]}))}))},t.prototype.mapAdvancedData=function(e,t){return i(this,void 0,Promise,(function(){var r,n,o;return a(this,(function(i){switch(i.label){case 0:return[4,this.mapBasicData(e,t)];case 1:return r=i.sent(),t.restore&&"mail"==t.restore&&(n=e.uid+"-mailbox.tgz",o="\n            \n                                        ================== PROCEDURA DI RIPRISTINO MAIL ===============\n                                        \n                                        <u>ATTENZIONE!!! - Eseguire questi passi solo DOPO aver creato l'account e prima di inviare la mail di test.</u>\n\n                                        - collegarsi su freezer2\n                                        - <b>cd /data/vm+servizi/bckuser/"+e.uid+"</b>\n                                        - <b>scp "+n+"  root@mailbox:. </b>\n                                        - collegarsi su mailbox\n                                        - <b>cd /var/imap</b>\n                                        - <b>tar xzvf /root/"+n+"</b>\n                                        - <b>cd</b>\n                                        - <b>rm "+n+"</b>\n                                        \n                                        ",r.RESTORE_MAIL_PROCEDURE=o.split("\n").map((function(e){return e.trim()})).join("\n")),[2,r]}}))}))},t}(r(74).Report);t.AccountReport=u},388:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.EnaDPortReport=void 0;var s=r(74),u=r(25),c=r(158).generateHtmlWhiteSpace,l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.getTemplateFileName=function(){return"dport.txt"},t.prototype.mapBasicData=function(e,t){return i(this,void 0,Promise,(function(){var r,n,o,i;return a(this,(function(a){switch(a.label){case 0:return r=t.port,t.port_alias,[4,u.helpers.getPortLocation(r)];case 1:return n=a.sent(),[4,u.helpers.getUserDHCPHosts(e.uuid)];case 2:if(o=a.sent(),!n)throw new Error("No location found by port: "+r);if(!o||0==o.length)throw new Error("No user dhcp hosts!!!");return[2,{SUBJ:"Attivazione presa di rete "+(i=n.port_code!=n.port_alias?n.port_alias:n.port_code),SUBJ_ITA:"Attivazione presa di rete "+i+" in configurazione DHCP",SUBJ_ENG:"Enabling network port "+i+" in DHCP configuration",NAME:e.name,SURNAME:e.surname,EMAIL:e.email,PHONE:e.phone||"---",H_MAC_LIST:o.map((function(e){return e.host_mac})).join("\n "+c(3)),BUILD:n.build,FLOOR:n.floor,ROOM:n.room,PORT:n.port_code}]}}))}))},t.prototype.mapAdvancedData=function(e,t){return i(this,void 0,Promise,(function(){var r,n;return a(this,(function(o){switch(o.label){case 0:return r="",[4,this.mapBasicData(e,t)];case 1:return n=o.sent(),this.processResult&&(r+="=====================  Esito esecuzione automatica  ====================<br>",r+=JSON.stringify(this.processResult.getValue())),n.PROCESS_RESULT=r,[2,n]}}))}))},t}(s.Report);t.EnaDPortReport=l},640:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ReportFactory=void 0;var n=r(502),o=r(851),i=r(654),a=r(388),s=function(){function e(){}return e.initialize=function(e,t,r){switch(e){case"IP":return new o.IPReport(t,r);case"DPORT":return new a.EnaDPortReport(t,r);case"WIFI":return new n.WiFiReport(t,r);case"ACCOUNT":return new i.AccountReport(t,r);default:throw Error("Invalid Request type")}},e}();t.ReportFactory=s},851:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.IPReport=void 0;var s=r(74),u=r(25),c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.toHostName=function(e,t){return e?e+"."+t:"DHCP"},t}return o(t,e),t.prototype.getTemplateFileName=function(){return"ip.txt"},t.prototype.mapBasicData=function(e,t){return i(this,void 0,Promise,(function(){var r,n,o,i,s,c,l,p,f,h,d,y,m;return a(this,(function(a){switch(a.label){case 0:return r=t.from,n=t.to,o=t.action,s=(i=n||r).name?i.name+"."+i.domain:"DHCP : "+i.mac,c={ITA:{create:"Nuovo nodo",update:"Aggiornamento dati del nodo",delete:"Rimozione nodo"},ENG:{create:"New host",update:"Update host data",delete:"Delete host"}},l={STATIC:"STATICO",DHCP:"DHCP",STATICVM:"STATICO - VIRTUALE"},"update"==o&&(s=r.name?r.name+"."+r.domain:"DHCP  "+r.mac),[4,u.helpers.getPortLocation(i.port)];case 1:return p=a.sent(),[4,u.helpers.getHost(i.mac)];case 2:return f=a.sent(),n&&n.name?[4,u.helpers.dnsLookup(n.name+"."+n.domain)]:[3,4];case 3:return d=a.sent(),[3,5];case 4:d=!1,a.label=5;case 5:if(h=d,"delete"!=o&&(y=["Request IP - "+o+" - errors:"],f&&(r&&r.mac==n.mac?f=!1:y.push("duplicated mac "+i.mac)),h&&(r&&r.name==n.name&&r.domain==n.domain?h=!1:y.push("duplicated name "+n.name+"."+n.domain)),f||h))throw new Error(y.join(" "));if(!p)throw new Error("No location found by port: "+i.port);return m={ACTION_ITA:c.ITA[o]+" - "+s,ACTION_ENG:c.ENG[o]+" - "+s,NAME:e.name,SURNAME:e.surname,EMAIL:e.email,PHONE:e.phone||"---",H_MAC:i.mac.toUpperCase(),NOTE:i.notes||"---",H_NAME:this.toHostName(i.name,i.domain),CONFIG:l[i.config],BUILD:p.build,FLOOR:p.floor,ROOM:p.room,PORT:p.port_code},"update"==o&&r?[4,u.helpers.getPortLocation(r.port)]:[3,7];case 6:p=a.sent(),m.H_MAC=this.displayChanges(r.mac,m.H_MAC),m.H_NAME=this.displayChanges(this.toHostName(r.name,r.domain),m.H_NAME),m.CONFIG=this.displayChanges(l[r.config],m.CONFIG),m.BUILD=this.displayChanges(p.build,m.BUILD),m.FLOOR=this.displayChanges(p.floor,m.FLOOR),m.ROOM=this.displayChanges(p.room,m.ROOM),m.PORT=this.displayChanges(p.port_code,m.PORT),a.label=7;case 7:return m.SUBJ=m.ACTION_ITA,[2,m]}}))}))},t.prototype.displayChanges=function(e,t){return t=t||"",e=(e=e||"").toString(),t=t.toString(),e.toLowerCase()==t.toLowerCase()?t.toUpperCase():e.toUpperCase()+" ==> <b>"+t.toUpperCase()+"</b>"},t.prototype.mapAdvancedData=function(e,t){return i(this,void 0,Promise,(function(){var r,n,o;return a(this,(function(i){switch(i.label){case 0:return r="",t.from,n=t.to,t.action,[4,this.mapBasicData(e,t)];case 1:return(o=i.sent()).USE_MAC_BUSY="",n&&n.useMacBusy&&(o.USE_MAC_BUSY="Attenzione, l'utente ha confermato l'intenzione di voler gestire il nodo con mac address "+n.mac.toUpperCase()+" che risulta già registrato."),this.processResult&&(r+="=====================  Esito esecuzione automatica  ====================<br>",r+=JSON.stringify(this.processResult.getValue())),o.PROCESS_RESULT=r,[2,o]}}))}))},t}(s.Report);t.IPReport=c},74:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderType=t.Report=void 0;var a,s=i(r(147)),u=r(17),c=r(873).templates;!function(e){e[e.BASIC=0]="BASIC",e[e.ADVANCED=1]="ADVANCED"}(a||(a={})),t.RenderType=a;var l=function(){function e(e,t,r){void 0===r&&(r=null),this.user=null,this.data=null,this.processResult=null,this.subject="",this.user=e,this.data=t,this.processResult=r}return e.prototype.getProcessResult=function(){return this.processResult},e.prototype.getSubject=function(){return this.subject},e.prototype.renderAs=function(e){return n(this,void 0,Promise,(function(){var t,r,n,i;return o(this,(function(o){switch(o.label){case 0:if(t=this.getTemplateFileName(),r="server/text/"+a[e]+"/"+t,r=u.resolve(r.toLowerCase()),!s.default.existsSync(r))throw Error("Missing file template: "+r);return n=s.default.readFileSync(r,"utf-8"),[4,this.mapData(this.user,this.data,e)];case 1:return i=o.sent(),this.subject=i.SUBJ||"",n=(n=this.replaceFieldValues(n,i)).replace(/\[USER_FULL_NAME\]/gi,this.user.name+" "+this.user.surname),e==a.ADVANCED&&(n=n.replace(/\[USER_INFO\]/gi,""+c.userInfo(this.user))),[2,n]}}))}))},e.prototype.mapData=function(e,t,r){switch(r){case a.BASIC:return this.mapBasicData(e,t);case a.ADVANCED:return this.mapAdvancedData(e,t)}},e.prototype.replaceFieldValues=function(e,t){var r=e;for(var n in t)r=r.replace(new RegExp("\\["+n+"\\]","g"),t[n]);return r},e}();t.Report=l},502:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},n(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WiFiReport=void 0;var u=r(74),c=r(537),l=s(r(245)),p="DD/MM/YYYY",f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.getTemplateFileName=function(){return"wifi.txt"},t.prototype.mapBasicData=function(e,t){return i(this,void 0,Promise,(function(){var r,n;return a(this,(function(o){return r=t.from,n=t.to,[2,{NAME:e.name,SURNAME:e.surname,EMAIL:e.email,PHONE:e.phone||"---",FROM:l.default(r).format(p),TO:l.default(n).format(p),NOTES:""}]}))}))},t.prototype.mapAdvancedData=function(e,t){return i(this,void 0,Promise,(function(){var r,n,o;return a(this,(function(i){switch(i.label){case 0:return r="",[4,this.mapBasicData(e,t)];case 1:return n=i.sent(),r="<b>Esito esecuzione automatica</b><br>",this.processResult&&(o=JSON.stringify(this.processResult.getValue()),r+=this.processResult.getStatus()==c.ProcessResultStatus.OK?""+o:"NON GESTITA"),n.PROCESS_RESULT=r,[2,n]}}))}))},t}(u.Report);t.WiFiReport=f},167:e=>{e.exports=require("axios")},245:e=>{e.exports=require("moment")},523:e=>{e.exports=require("dns")},147:e=>{e.exports=require("fs")},17:e=>{e.exports=require("path")},982:t=>{t.exports=e},237:e=>{e.exports=t},873:e=>{e.exports=r},158:e=>{e.exports=n},570:e=>{e.exports=o}},a={};return function e(t){var r=a[t];if(void 0!==r)return r.exports;var n=a[t]={exports:{}};return i[t].call(n.exports,n,n.exports,e),n.exports}(584)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,